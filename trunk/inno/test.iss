; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "test"
#define MyAppVersion "1.5"
#define MyAppPublisher "My Company, Inc."
#define MyAppURL "http://www.example.com/"
#define MyAppExeName "MyProg.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{3E321B22-FEC3-43AF-B4D6-30E3E828A1B7}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
OutputBaseFilename=setup
Compression=lzma
SolidCompression=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "C:\Program Files (x86)\Inno Setup 5\Examples\MyProg.exe"; DestDir: "{app}"; Flags: ignoreversion; AfterInstall:  FilesStringChangeEx('C:\temp\', '*.log', 'two', 'due', True)
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[Code]
// Replace given string in a file
// Sample call: FileStringChangeEx('C:\temp\sample.log', 'two', 'dos')
procedure FileStringChangeEx(const FileName: String; const FromStr, ToStr: String);
var
  S: AnsiString;
begin
  if LoadStringFromFile(FileName, S) then
  begin
    StringChangeEx(S, FromStr, ToStr, True);
    SaveStringToFile(FileName, S, False);
  end;
end;

// Replace given string in all matching files
// Sample call: FilesStringChangeEx('C:\temp\', '*.xml', 'one', 'uno', True)
procedure FilesStringChangeEx(const FolderPath: String; const MatchingFiles: String; const FromStr, ToStr: String; const recurse: Boolean);
var
  myFolderPath: String;
  FindRec: TFindRec;
begin
  myFolderPath := AddBackslash(FolderPath);
  if FindFirst(myFolderPath + MatchingFiles, FindRec) then 
  begin
    try
      repeat
        if FindRec.Attributes and FILE_ATTRIBUTE_DIRECTORY = 0 then
          FileStringChangeEx(myFolderPath + FindRec.Name, FromStr, ToStr)           
      until not FindNext(FindRec);
    finally
      FindClose(FindRec);      
    end;
  end;
  if recurse then
  begin
    if FindFirst(myFolderPath + '*.*', FindRec) then 
    begin
      try
        repeat
          if not (FindRec.Attributes and FILE_ATTRIBUTE_DIRECTORY = 0) then
            if (FindRec.Name <> '.') and (FindRec.Name <> '..')then     
              FilesStringChangeEx(myFolderPath + FindRec.Name, MatchingFiles, FromStr, ToStr, True);
        until not FindNext(FindRec);
      finally
        FindClose(FindRec);      
      end;
    end;      
  end;
end;



// Returns the contents of an XML file
function TemplateXML(): String;
var
  S: String;
begin
  S := '<?xml version="1.0" encoding="utf-8"?>' + #13#10;
  S := S + '<data>' + #13#10;
  S := S + '  <active>True</active>' + #13#10;
  S := S + '  <store>' + #13#10;
  S := S + '    <name>@STORE_NAME@</name>' + #13#10;
  S := S + '    <phone>@STORE_PHONE@</phone>' + #13#10;
  S := S + '    <url>@STORE_URL@</url>' + #13#10;
  S := S + '    <orders>' + #13#10;
  S := S + '      <lastid>1</lastid>' + #13#10;
  S := S + '    </orders>' + #13#10;
  S := S + '  </store>' + #13#10;
  S := S + '</data>' + #13#10;
  Result := S;
end;

// Create a new XML file
procedure CreateXML(const FileName: String; const name, phone: String);
var
  S: String;
begin
  S := TemplateXML();
  StringChangeEx(S, '@STORE_NAME@', name, True);
  StringChangeEx(S, '@STORE_PHONE@', phone, True);
  SaveStringToFile(FileName, S, False);
end;
