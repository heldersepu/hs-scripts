.TH "stdlib.h" 3 "4 Dec 2008" "Version 1.6.4" "avr-libc" \" -*- nroff -*-
.ad l
.nh
.SH NAME
stdlib.h \- 
.SH "Detailed Description"
.PP 

.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBdiv_t\fP"
.br
.ti -1c
.RI "struct \fBldiv_t\fP"
.br
.in -1c
.SS "Non-standard (i.e. non-ISO C) functions."

.in +1c
.ti -1c
.RI "#define \fBRANDOM_MAX\fP   0x7FFFFFFF"
.br
.ti -1c
.RI "char * \fBitoa\fP (int __val, char *__s, int __radix)"
.br
.ti -1c
.RI "char * \fBltoa\fP (long int __val, char *__s, int __radix)"
.br
.ti -1c
.RI "char * \fButoa\fP (unsigned int __val, char *__s, int __radix)"
.br
.ti -1c
.RI "char * \fBultoa\fP (unsigned long int __val, char *__s, int __radix)"
.br
.ti -1c
.RI "long \fBrandom\fP (void)"
.br
.ti -1c
.RI "void \fBsrandom\fP (unsigned long __seed)"
.br
.ti -1c
.RI "long \fBrandom_r\fP (unsigned long *__ctx)"
.br
.in -1c
.SS "Conversion functions for double arguments."
Note that these functions are not located in the default library, \fClibc.a\fP, but in the mathematical library, \fClibm.a\fP. So when linking the application, the \fC-lm\fP option needs to be specified. 
.in +1c
.ti -1c
.RI "#define \fBDTOSTR_ALWAYS_SIGN\fP   0x01"
.br
.ti -1c
.RI "#define \fBDTOSTR_PLUS_SIGN\fP   0x02"
.br
.ti -1c
.RI "#define \fBDTOSTR_UPPERCASE\fP   0x04"
.br
.ti -1c
.RI "char * \fBdtostre\fP (double __val, char *__s, unsigned char __prec, unsigned char __flags)"
.br
.ti -1c
.RI "char * \fBdtostrf\fP (double __val, signed char __width, unsigned char __prec, char *__s)"
.br
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fB_STDLIB_H_\fP   1"
.br
.ti -1c
.RI "#define \fB__need_NULL\fP"
.br
.ti -1c
.RI "#define \fB__need_size_t\fP"
.br
.ti -1c
.RI "#define \fB__need_wchar_t\fP"
.br
.ti -1c
.RI "#define \fB__ptr_t\fP   void *"
.br
.ti -1c
.RI "#define \fBRAND_MAX\fP   0x7FFF"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef int(* \fB__compar_fn_t\fP )(const void *, const void *)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBabort\fP (void) __ATTR_NORETURN__"
.br
.ti -1c
.RI "int \fBabs\fP (int __i)"
.br
.ti -1c
.RI "long \fBlabs\fP (long __i)"
.br
.ti -1c
.RI "void * \fBbsearch\fP (const void *__key, const void *__base, size_t __nmemb, size_t __size, int(*__compar)(const void *, const void *))"
.br
.ti -1c
.RI "\fBdiv_t\fP \fBdiv\fP (int __num, int __denom) __asm__('__divmodhi4')"
.br
.ti -1c
.RI "\fBldiv_t\fP \fBldiv\fP (long __num, long __denom) __asm__('__divmodsi4')"
.br
.ti -1c
.RI "void \fBqsort\fP (void *__base, size_t __nmemb, size_t __size, \fB__compar_fn_t\fP __compar)"
.br
.ti -1c
.RI "long \fBstrtol\fP (const char *__nptr, char **__endptr, int __base)"
.br
.ti -1c
.RI "unsigned long \fBstrtoul\fP (const char *__nptr, char **__endptr, int __base)"
.br
.ti -1c
.RI "long \fBatol\fP (const char *__s) __ATTR_PURE__"
.br
.ti -1c
.RI "int \fBatoi\fP (const char *__s) __ATTR_PURE__"
.br
.ti -1c
.RI "void \fBexit\fP (int __status) __ATTR_NORETURN__"
.br
.ti -1c
.RI "void * \fBmalloc\fP (size_t __size) __ATTR_MALLOC__"
.br
.ti -1c
.RI "void \fBfree\fP (void *__ptr)"
.br
.ti -1c
.RI "void * \fBcalloc\fP (size_t __nele, size_t __size) __ATTR_MALLOC__"
.br
.ti -1c
.RI "void * \fBrealloc\fP (void *__ptr, size_t __size) __ATTR_MALLOC__"
.br
.ti -1c
.RI "double \fBstrtod\fP (const char *__nptr, char **__endptr)"
.br
.ti -1c
.RI "double \fBatof\fP (const char *__nptr)"
.br
.ti -1c
.RI "int \fBrand\fP (void)"
.br
.ti -1c
.RI "void \fBsrand\fP (unsigned int __seed)"
.br
.ti -1c
.RI "int \fBrand_r\fP (unsigned long *__ctx)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "size_t \fB__malloc_margin\fP"
.br
.ti -1c
.RI "char * \fB__malloc_heap_start\fP"
.br
.ti -1c
.RI "char * \fB__malloc_heap_end\fP"
.br
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for avr-libc from the source code.
